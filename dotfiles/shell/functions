#! /bin/bash

# Check if a Web site is down within local network or not
function down4me() {
	curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'
}

function pathAppend ()  {
	pathRemove $1; export PATH="$PATH:$1";
}

function pathPrepend () {
	pathRemove $1; export PATH="$1:$PATH";
}

function pathRemove ()  {
	export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`;
}

# acd_func 1.0.5, 10-nov-2004
# petar marinov, http:/geocities.com/h2428, this is public domain
function cd_hist() {
	local x2 the_new_dir adir index
	local -i cnt

	if [[ $1 ==  "--" ]]; then
		dirs -v
		return 0
	fi

	the_new_dir=$1
	[[ -z $1 ]] && the_new_dir=$HOME

	if [[ ${the_new_dir:0:1} == '-' ]]; then
		# Extract dir N from dirs
		index=${the_new_dir:1}
		[[ -z $index ]] && index=1
		adir=$(dirs +$index)
		[[ -z $adir ]] && return 1
		the_new_dir=$adir
	fi

	# '~' has to be substituted by ${HOME}
	[[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

	# Now change to the new dir and add to the top of the stack
	pushd "${the_new_dir}" > /dev/null
	[[ $? -ne 0 ]] && return 1
	the_new_dir=$(pwd)

	# Trim down everything beyond 11th entry
	popd -n +11 2>/dev/null 1>/dev/null

#
	# Remove any other occurence of this dir, skipping the top of the stack
	for ((cnt=1; cnt <= 10; cnt++)); do
		x2=$(dirs +${cnt} 2>/dev/null)
		[[ $? -ne 0 ]] && return 0
		[[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
		if [[ "${x2}" == "${the_new_dir}" ]]; then
			popd -n +$cnt 2>/dev/null 1>/dev/null
			cnt=cnt-1
		fi
	done

	return 0
}

alias cd=cd_hist
if [[ $BASH_VERSION > "2.05a" ]]; then
	# ctrl+w shows the path menu
	bind -x '"\C-w": cd_hist -- ;'
fi

# zip a directory
function zipit () {
	zip -r "$1".zip "$1" ;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function webserver() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# debug_http: download a web page and show info on what took time
function speed() {
	/usr/bin/curl $@ -s -o /dev/null -w "dns: %{time_namelookup}, connect: %{time_connect}, pretransfer: %{time_pretransfer}, starttransfer: %{time_starttransfer}, total: %{time_total}, #connect: %{num_connects}, size: %{size_download}, speed: %{speed_download}\n" ;
}

# http_headers: get just the HTTP headers from a web page (and its redirects)
function headers() {
	/usr/bin/curl -I -L $@ ;
}

# open firefox with a fresh profile
function newff() {
	pn="ff-$(tr -dc "0-9a-f" < /dev/urandom | head -c 8)"
	firefox -CreateProfile "$pn /tmp/$pn"
	firefox -no-remote -P "$pn" "$@" &> /dev/null &
}

# open chrome with a fresh profile
function newcr() {
	#pn="cr-$(tr -dc "0-9a-f" < /dev/urandom | head -c 8)"
	pn=$(mktemp --tmpdir -dq chrome-XXX)

	# dock devtools to right
	# sed -i -e 's/\"browser\": {/"devtools": { "dock_side": "right" }, "browser": {/' "$pn/Default/Preferences"
	echo "Starting Chrome with profile in $pn"
	open -a 'Google-chrome' --args --no-first-run --user-data-dir="$pn" "$@" &> /dev/null &
}

function getScreenSize() {
	xdpyinfo | awk '/dimensions:/ { print $2; exit }'
}

function getScreenWidth() {
	xdpyinfo | awk '/dimensions:/ { split($2,a,"x");print a[1]; exit }'
}

function getScreenHeight() {
	xdpyinfo | awk '/dimensions:/ { split($2,a,"x");print a[2]; exit }'
}

