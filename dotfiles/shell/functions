#! /bin/bash

# Check if a Web site is down within local network or not
down4me() {
	curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'
}

pathAppend()  {
	pathRemove $1; export PATH="$PATH:$1";
}

pathPrepend() {
	pathRemove $1; export PATH="$1:$PATH";
}

pathRemove()  {
	export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`;
}

# acd_func 1.0.5, 10-nov-2004
# petar marinov, http:/geocities.com/h2428, this is public domain
cd_hist() {
	local x2 the_new_dir adir index
	local -i cnt

	if [[ $1 ==  "--" ]]; then
		dirs -v
		return 0
	fi

	the_new_dir=$1
	[[ -z $1 ]] && the_new_dir=$HOME

	if [[ ${the_new_dir:0:1} == '-' ]]; then
		# Extract dir N from dirs
		index=${the_new_dir:1}
		[[ -z $index ]] && index=1
		adir=$(dirs +$index)
		[[ -z $adir ]] && return 1
		the_new_dir=$adir
	fi

	# '~' has to be substituted by ${HOME}
	[[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

	# Now change to the new dir and add to the top of the stack
	pushd "${the_new_dir}" > /dev/null
	[[ $? -ne 0 ]] && return 1
	the_new_dir=$(pwd)

	# Trim down everything beyond 11th entry
	popd -n +11 2>/dev/null 1>/dev/null

	#
	# Remove any other occurence of this dir, skipping the top of the stack
	for ((cnt=1; cnt <= 10; cnt++)); do
		x2=$(dirs +${cnt} 2>/dev/null)
		[[ $? -ne 0 ]] && return 0
		[[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
		if [[ "${x2}" == "${the_new_dir}" ]]; then
			popd -n +$cnt 2>/dev/null 1>/dev/null
			cnt=cnt-1
		fi
	done

	return 0
}

alias cd=cd_hist
if [[ $BASH_VERSION > "2.05a" ]]; then
	# ctrl+w shows the path menu
	bind -x '"\C-w": cd_hist -- ;'
fi

# zip a directory
zipit() {
	# if no arg or . as arg
	if [[ $# -eq 0 || $1 = '.' ]]; then
		# name archive after current dir
		fn="$(pwd)"
		fn="${fn##*/}"
		zip -9r "$fn.zip" ./*
	else
		echo zip -9r "${1}.zip" "$1"
		zip -9r "${1}.zip" "$1"
	fi
}

# Create a data URL from a file
dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
webserver() {
	local port="${1:-8000}"
	sleep 1 && devcr "http://localhost:${port}/" &
# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# download a web page and show info on what took time
speed() {
	/usr/bin/curl $@ -s -o /dev/null -w "dns: %{time_namelookup}, connect: %{time_connect}, pretransfer: %{time_pretransfer}, starttransfer: %{time_starttransfer}, total: %{time_total}, #connect: %{num_connects}, size: %{size_download}, speed: %{speed_download}\n" ;
}

# http_headers: get just the HTTP headers from a web page (and its redirects)
headers() {
	/usr/bin/curl -I -L $@ ;
}

# open firefox with a fresh profile
newff() {
	pn="ff-$(tr -dc "0-9a-f" < /dev/urandom | head -c 8)"
	firefox -CreateProfile "$pn /tmp/$pn"
	firefox -no-remote -P "$pn" "$@" &> /dev/null &
}

# open chrome with a fresh profile for development
devcr() {
	# or consider using /dev/null for profile
	pn=$(mktemp -dq -t chrome)
	echo "Starting Chrome for development with profile in $pn"

	read -d '' params <<EOM
--ignore-certificate-errors
--no-default-browser-check
--disable-web-security
--disable-application-cache
--allow-file-access-from-files
--no-first-run
--disk-cache-dir=/dev/null
--disk-cache-size=1
--media-cache-size=1
--user-data-dir=$pn
EOM

	open -na 'Google Chrome' --args "$@" $params $1 &> /dev/null &
}

# open chrome with a fresh profile
newcr() {
	pn=$(mktemp -dq -t chrome)

	echo "Starting Chrome with new profile in $pn"

	read -d '' params <<EOM
--no-default-browser-check
--no-first-run
--user-data-dir=$pn
EOM

	open -na 'Google Chrome' --args "$@" $params &> /dev/null &
}

getScreenSize() {
	xdpyinfo | awk '/dimensions:/ { print $2; exit }'
}

getScreenWidth() {
	xdpyinfo | awk '/dimensions:/ { split($2,a,"x");print a[1]; exit }'
}

getScreenHeight() {
	xdpyinfo | awk '/dimensions:/ { split($2,a,"x");print a[2]; exit }'
}

urlencode() {
	python -c "import sys, urllib as ul; print ul.quote_plus('$1')"
}

urldecode() {
	python -c "import sys, urllib as ul; print ul.unquote_plus('$1')"
}

# faster grep with mdfind and ack. pattern is a literal
spotlight-g() {
	mdfind -onlyin "${PWD}" "$1"| ack -xsQ "$@"
}

# faster grep with mdfind and ack. pattern is a perl regex and needs to be
# escaped
spotlight-r() {
	mdfind -onlyin "${PWD}" "$1" | ack -xs "$@"
}

# fix invisible output with some node runners and solarized
# see https://github.com/visionmedia/mocha/issues/802
# and https://github.com/altercation/solarized/issues/220
# mocha() {
# 	mocha=$(type -P mocha)
# 	substitution='s/\x1b\[90m/\x1b[92m/g'
# 
# 	$mocha -c "$@" > >(perl -pe "$substitution") 2> >(perl -pe "$substitution" 1>&2)
# }
# 
# appium() {
# 	appium=$(type -P appium)
# 	substitution='s/\x1b\[90m/\x1b[92m/g'
# 
# 	$appium "$@" > >(perl -pe "$substitution") 2> >(perl -pe "$substitution" 1>&2)
# }

# cd into a Project home
cdp() {
	local proj="${HOME}/Projects/$1"
	if [[ -d "$proj" ]]; then
		if [[ -d "$proj/ws" ]]; then
			cd "$proj/ws"
		else
			cd "$proj"
		fi
	fi
}

# render a markdown document into an html file
rendermd() {
	local style=${HOME}/Reference/pandoc-template/style.html
	pandoc -s -H $style $1 -f markdown+auto_identifiers+implicit_header_references -t html5 -o out.html
}

# show details for processes with network listeners
listeners() {
	lsof +c0 -Pni -sTCP:LISTEN | grep -v COMMAND | awk '{ print $2 }' | sort -nu | xargs ps -fp
}

# start a packet capture on provided network interface, default en1
pcap() {
	interface=${1:-en1}
	sudo tcpdump -i $interface -n -s 0 -w capture.pcap tcp or port 53}
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# From: https://github.com/carlhuda/janus/wiki/Rvm
# Define Vim wrappers which unsets GEM_HOME and GEM_PATH before
# invoking vim and all known aliases
#
# @author Wael Nasreddine <wael.nasreddine@gmail.com>
# define_vim_wrappers() {
#   vim_commands=(
#     eview evim gview gvim gvimdiff gvimtutor rgview
#     rgvim rview rvim vim vimdiff vimtutor xxd mvim
#   )
#
#   for cmd in ${vim_commands[@]}; do
# 	  cmd_path=$(/usr/bin/env which -a "${cmd}" 2>/dev/null | grep '^/')
#     if [ -x "${cmd_path}" ]; then
#       eval "function ${cmd} () { (unset GEM_HOME; unset GEM_PATH; $cmd_path \$@) }"
#     fi
#   done
# }

# dump a .mobileprovision file
dumpMobileprovision() {
	openssl smime -inform der -verify -noverify -in "$1" | plutil -p -
}

# find process, http://brettterpstra.com/2014/08/15/shell-tricks-a-time-to-kill/
fp () { #find and list processes matching a case-insensitive partial-match string
	ps Ao pid,comm|awk '{match($0,/[^\/]+$/); print substr($0,RSTART,RLENGTH)": "$1}'|grep -i $1|grep -v grep
}
 
# build a menu of processes matching (case-insensitive, partial) first parameter
# now automatically tries to use the `quit` script if process is a Mac app <http://jon.stovell.info/personal/Software.html>
fk () {
	local cmd OPT
	IFS=$'\n'
	PS3='Kill which process? (q to cancel): '
	select OPT in $(fp $1); do
		if [[ $OPT =~ [0-9]$ ]]; then
			cmd=$(ps -p ${OPT##* } -o command|tail -n 1)
			if [[ "$cmd" =~ "Contents/MacOS" ]] && [[ -f ~/bin/quit ]]; then
				echo "Quitting ${OPT%%:*}"
				cmd=$(echo "$cmd"| sed -E 's/.*\/(.*)\.app\/.*/\1/')
				/usr/local/bin/quit -n "$cmd"
			else
				echo "killing ${OPT%%:*}"
				kill ${OPT##* }
			fi
		fi
		break
	done
	unset IFS
}

# see if someone is listening on a specific tcp port
knock() {
	if [[ $# -eq 0 ]]; then
		echo "missing port number"
	else 
		lsof +c0 -l -n -P -sTCP:LISTEN -iTCP:$1
	fi
}
