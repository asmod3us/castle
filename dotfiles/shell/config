#! /bin/bash
ulimit -n 2048
# Don't wait for job termination notification
# set -o notify

# Don't use ^D to exit
# set -o ignoreeof

# Use case-insensitive filename globbing
shopt -s nocaseglob

# Use hidden file globbing
shopt -s cmdhist

# Make bash append rather than overwrite the history on disk
shopt -s histappend

# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
shopt -s cdspell

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# save multi-line commands as one history entry
shopt -s cmdhist

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# show dirty state in __git_ps1
# GIT_PS1_SHOWDIRTYSTATE=1

# show status relative to upstream in __git_ps1
# GIT_PS1_SHOWUPSTREAM=auto

# show stashes in __git_ps1
# GIT_PS1_SHOWSTASHSTATE=1

# setup colors for solarized
if tput setaf 1 &> /dev/null; then
	tput sgr0
	TPUTCOLORS=$(tput colors)
	if [[ $TPUTCOLORS -ge 256 ]]; then
		BASE03=$(tput setaf 234)
		BASE02=$(tput setaf 235)
		BASE01=$(tput setaf 240)
		BASE00=$(tput setaf 241)
		BASE0=$(tput setaf 244)
		BASE1=$(tput setaf 245)
		BASE2=$(tput setaf 254)
		BASE3=$(tput setaf 230)
		YELLOW=$(tput setaf 136)
		ORANGE=$(tput setaf 166)
		RED=$(tput setaf 160)
		MAGENTA=$(tput setaf 125)
		VIOLET=$(tput setaf 61)
		BLUE=$(tput setaf 33)
		CYAN=$(tput setaf 37)
		GREEN=$(tput setaf 64)
	elif [[  TPUTCOLORS -ge 16 ]]; then
		# 16 colors available
		BASE03=$(tput setaf 8)
		BASE02=$(tput setaf 0)
		BASE01=$(tput setaf 10)
		BASE00=$(tput setaf 11)
		BASE0=$(tput setaf 12)
		BASE1=$(tput setaf 14)
		BASE2=$(tput setaf 7)
		BASE3=$(tput setaf 15)
		YELLOW=$(tput setaf 3)
		ORANGE=$(tput setaf 9)
		RED=$(tput setaf 1)
		MAGENTA=$(tput setaf 5)
		VIOLET=$(tput setaf 13)
		BLUE=$(tput setaf 4)
		CYAN=$(tput setaf 6)
		GREEN=$(tput setaf 2)
	else
		# hmm, less than 16 colors
		# let's try with one of the 5 color palette modes:
		# base02, base1, base2, magenta, violet
		BASE03=
		BASE02=$(tput setaf 0)
		BASE01=
		BASE00=
		BASE0=
		BASE1=$(tput setaf 14)
		BASE2=$(tput setaf 7)
		BASE3=
		YELLOW=
		ORANGE=
		RED=
		MAGENTA=$(tput setaf 5)
		VIOLET=$(tput setaf 13)
		BLUE=
		CYAN=
		GREEN=
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
	CLEAREOL=$(tput el)
	PROMPTBG=$(tput setab 7)
else
	# no tput, let's try with ansi escape sequences
	BASE03="\033[0;90m" # br black
	BASE02="\033[0;30m" # black
	BASE01="\033[0;92m" # br green
	BASE00="\033[0;93m" # br yellow
	BASE0="\033[0;94m" # br blue
	BASE1="\033[0;96m" # br cyan
	BASE2="\033[1;37m" # white
	BASE3="\033[0;97m" # br white
	YELLOW="\033[0;33m"
	ORANGE="\033[1;91m"
	RED="\033[0;31m"
	MAGENTA="\033[0;35m"
	VIOLET="\033[0;95m" # br magenta
	BLUE="\033[0;34m"
	CYAN="\033[0;36m"
	GREEN="\033[0;32m"
	WHITE="\033[1;37m"
	BOLD=""
	RESET="\033[0m"
	CLEAREOL="\033[K"
	PROMPTBG="\033[0;0;30m"
fi

# fastest possible way to check if repo is dirty
gitInfo() {
	# check if we're in a git repo
	git rev-parse --is-inside-work-tree &>/dev/null || return
	BRANCH=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')
	echo -n "$BRANCH"
	# check if it's dirty
	git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo '✎ ' || echo ' '
}

# command timing
timerStart() {
	timer=${timer:-$SECONDS}
}

timerStop() {
	if [[ -n "$timer" ]]; then
		lastElapsed=$(($SECONDS - $timer))
		unset timer
	fi
}

# display human readable time
displayTime() {
	local T=$1
	local D=$((T/60/60/24))
	local H=$((T/60/60%24))
	local M=$((T/60%60))
	local S=$((T%60))
	[[ $D > 0 ]] && printf '%dd' $D
	[[ $H > 0 ]] && printf '%dh' $H
	[[ $M > 0 ]] && printf '%dm' $M
	# [[ $D > 0 || $H > 0 || $M > 0 ]] && printf ' '
	printf '%ds' $S
}

# set tab title
tabtitle() {
	printf "\e]1;$1\a";
}

# set tab title to name of current dir
setTabTitleToPwd() {
	# printf "\e]1;$1\a";
	printf "\e]1;${PWD##*/}\a";
}

wintitle() {
	printf "\e]2;$1\a";
}

# This variable describes whether we are currently in "interactive mode";
# i.e. whether this shell has just executed a prompt and is waiting for user
# input.  It documents whether the current command invoked by the trace hook is
# run interactively by the user; it's set immediately after the prompt hook,
# and unset as soon as the trace hook is run.

preexec_interactive_mode=""

# Default do-nothing implementation of preexec.
preexec() {
	true
}

# Default do-nothing implementation of precmd.
precmd() {
	true
}
# Adjusted from https://twistedmatrix.com/users/glyph/preexec.bash.txt.
# This function is installed as the PROMPT_COMMAND; it is invoked before each
# interactive prompt display.  It sets a variable to indicate that the prompt
# was just displayed, to allow the DEBUG trap, below, to know that the next
# command is likely interactive.
preexec_invoke_cmd() {
	precmd
	preexec_interactive_mode="yes"
}

# This function is installed as the DEBUG trap.  It is invoked before each
# interactive prompt display.  Its purpose is to inspect the current
# environment to attempt to detect if the current command is being invoked
# interactively, and invoke 'preexec' if so.
preexec_invoke_exec() {
	if [[ -n "$COMP_LINE" ]]
	then
		# We're in the middle of a completer.  This obviously can't be
		# an interactively issued command.
		return
	fi
	if [[ -z "$preexec_interactive_mode" ]]
	then
		# We're doing something related to displaying the prompt.  Let the
		# prompt set the title instead of me.
		return
	else
		# If we're in a subshell, then the prompt won't be re-displayed to put
		# us back into interactive mode, so let's not set the variable back.
		# In other words, if you have a subshell like
		#   (sleep 1; sleep 2)
		# You want to see the 'sleep 2' as a set_command_title as well.
		if [[ 0 -eq "$BASH_SUBSHELL" ]]
		then
			preexec_interactive_mode=""
		fi
	fi
	if [[ "preexec_invoke_cmd" == "$BASH_COMMAND" ]]
	then
		# Sadly, there's no cleaner way to detect two prompts being displayed
		# one after another.  This makes it important that PROMPT_COMMAND
		# remain set _exactly_ as below in preexec_install.  Let's switch back
		# out of interactive mode and not trace any of the commands run in
		# precmd.

		# Given their buggy interaction between BASH_COMMAND and debug traps,
		# versions of bash prior to 3.1 can't detect this at all.
		preexec_interactive_mode=""
		return
	fi

	# In more recent versions of bash, this could be set via the "BASH_COMMAND"
	# variable, but using history here is better in some ways: for example, "ps
	# auxf | less" will show up with both sides of the pipe if we use history,
	# but only as "ps auxf" if not.
	local this_command=`history 1 | sed -e "s/^[ ]*[0-9]*[ ]*//g"`;

	# If none of the previous checks have earlied out of this function, then
	# the command is in fact interactive and we should invoke the user's
	# preexec hook with the running command as an argument.
	preexec "$this_command"
}

STARTUID=$(id -u)

retval() {
	# remember exit code for coloring
	RETVAL=$?
}

# set up prompt
prompt_command() {

	# red color for root
	if [ $UID -eq 0 ]; then
		USER_HOST="\[${RED}\]\u@\h "
	elif [ ! $UID -eq $STARTUID ]; then
		# show user and host
		USER_HOST="\[${CYAN}\]\u@\h "
	else 
		USER_HOST=""
	fi

	# red exit code and prompt sign if non-zero
	if [[ $RETVAL -ne 0 ]]; then
		EXIT_CODE="\[${RED}\]($RETVAL) "
		SIGN="\[${RED}\]❯ "
	else
		EXIT_CODE=""
		SIGN="❯ "
	fi

	TIME="\A "
	if [ -n "$lastElapsed" ]; then
		# threshold is 5 seconds
		if [ $lastElapsed -gt 5 ]; then
			ELAPSED="\$(displayTime $lastElapsed) "
			unset timer
			unset lastElapsed
		fi
	else
		ELAPSED=""
	fi

	# __git_ps1 is a bit slow
	# GITINFO="\$(type -t __git_ps1 &> /dev/null && __git_ps1 '[%s] ')"
	GITINFO="\$(gitInfo)"
	DISPLAYPATH="\w"

	# set the prompt
	PS1="\[${RESET}${PROMPTBG}${BASE1}\]"
	PS1+="${TIME}"
	PS1+="\[${VIOLET}\]${ELAPSED}"
	PS1+="${USER_HOST}"
	PS1+="${EXIT_CODE}"
	PS1+="\[${BLUE}\]${GITINFO}"
	PS1+="\[${ORANGE}\]${DISPLAYPATH}"
	PS1+="\[${CLEAREOL}${RESET}\]\n"
	PS1+="\[${RESET}\]"
	PS1+="${SIGN}"
	PS1+="\[${BASE0}${RESET}\]"
	export PS1

	# uncomment to get a quick color test with echo $TESTCOLOR
	# export TESTCOLOR="${BASE03}BASE03 ${BASE02}BASE02 ${BASE01}BASE01 ${BASE3}BASE00 ${BASE2}BASE2 ${BASE1}BASE1 ${BASE0}BASE0 ${YELLOW}YELLOW ${ORANGE}ORANGE ${RED}RED ${MAGENTA}MAGENTA ${VIOLET}VIOLET ${BLUE}BLUE ${CYAN}CYAN ${GREEN}GREEN${RESET} "
}

# Execute this to set up preexec and precmd execution.
function preexec_install() {

	# *BOTH* of these options need to be set for the DEBUG trap to be invoked
	# in ( ) subshells.  This smells like a bug in bash to me.  The null stderr
	# redirections are to quiet errors on bash2.05 (i.e. OSX's default shell)
	# where the options can't be set, and it's impossible to inherit the trap
	# into subshells.

	set -o functrace > /dev/null 2>&1
	shopt -s extdebug > /dev/null 2>&1

	# Finally, install the actual traps.
	# prompt is set below
	# PROMPT_COMMAND="preexec_invoke_cmd; ${PROMPT_COMMAND}"
	trap 'preexec_invoke_exec' DEBUG
}

# Add real hooks for command timing
preexec() {
	timerStart
}

precmd() {
	timerStop
}

# Install command timing
preexec_install

# Whenever displaying the prompt, write the previous line to disk (-a) and read
# the new line into the history list (-n). Also run the command timing hook.
if [[ ! ${PROMPT_COMMAND} =~ 'prompt_command' ]]; then
	export PROMPT_COMMAND="retval; history -a; history -n; setTabTitleToPwd; ${PROMPT_COMMAND:-} preexec_invoke_cmd; prompt_command"
fi

