snippet def "define AMD" b
define([
    ${1:mids}
], function(
`!p snip >> 1
names = [ re.sub(r".*\/_?(\w+)'", r"\1", x) for x in t[1].split(',') ]
snip.rv = ',\n'.join(snip.mkline(name) for name in names)`
) {

    $0

});
endsnippet

snippet req "require AMD" b
require([${1:mids}], function(`!p
names = [ re.sub(r".*\/_?(\w+)'", r"\1", x) for x in t[1].split(',') ]
lines = [ snip.mkline(name) for name in names ]
snip.rv = string.join(lines, ',')`) {
	$0
});
endsnippet

snippet decl "declare AMD" b
return declare(${1:name}, [ ${2:parents} ] {
    constructor: function(${3:params}) {
        $0
    }
});
endsnippet

snippet desc "describe" b
describe("$1", function() {
    $0
});
endsnippet

snippet ex "expect" b
expect($1).$0;
endsnippet

snippet it "it block" b
it("should $1", function() {
    $0
});
endsnippet

